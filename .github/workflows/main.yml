# GitHub Actions Workflow for Flutter Android and iOS CI/CD

name: Flutter CI/CD

# Controls when the workflow will run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables for the workflow
env:
  FLUTTER_VERSION: '3.19.0' # Specify your Flutter version
  JAVA_VERSION: '17' # Java version for Android builds

jobs:
  # Job to build and test the Android application
  build_android:
    name: Build Android
    runs-on: ubuntu-latest # Use Ubuntu for Android builds

    steps:
      # Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Flutter SDK
      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable # Or beta/master if needed

      # Set up Java Development Kit (JDK) for Android
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      # Get Flutter package dependencies
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Run Flutter tests
      - name: Run Flutter Tests
        run: flutter test

      # --- Android Signing Configuration (IMPORTANT: Store sensitive data as GitHub Secrets) ---
      # Create keystore file from base64 secret (for release builds)
      - name: Create Keystore File
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
        if: github.ref == 'refs/heads/main' # Only for main branch builds

      # Build Android App Bundle (.aab) for release
      - name: Build Android App Bundle
        run: flutter build appbundle --release
        env:
          KEY_STORE_PATH: ${{ github.workspace }}/android/app/upload-keystore.jks
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        if: github.ref == 'refs/heads/main' # Only for main branch builds

      # Build Android APK (for debug or testing if appbundle is not needed)
      - name: Build Android APK (Debug)
        run: flutter build apk --debug
        if: github.ref != 'refs/heads/main' # For PRs or other branches

      # Upload the generated Android artifact
      - name: Upload Android App Bundle/APK
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: |
            build/app/outputs/bundle/release/app-release.aab # Path for app bundle
            build/app/outputs/flutter-apk/app-debug.apk # Path for debug apk
          retention-days: 7 # How long to keep the artifact

  # Job to build and test the iOS application
  build_ios:
    name: Build iOS
    runs-on: macos-latest # Use macOS for iOS builds

    steps:
      # Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Flutter SDK
      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      # Get Flutter package dependencies
      - name: Get Flutter Dependencies
        run: flutter pub get

      # Run Flutter tests
      - name: Run Flutter Tests
        run: flutter test

      # --- iOS Signing Configuration (IMPORTANT: Store sensitive data as GitHub Secrets) ---
      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios
          pod install # Installs iOS dependencies via CocoaPods
          cd .. # Navigate back to the root directory

      # Decode and install Apple Distribution Certificate (.p12)
      - name: Install Apple Certificate
        if: github.ref == 'refs/heads/main'
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          echo "$P12_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p flutter_ci_keychain flutter_ci_keychain.keychain
          security default-keychain -s flutter_ci_keychain.keychain
          security unlock-keychain -p flutter_ci_keychain flutter_ci_keychain.keychain
          security import certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k flutter_ci_keychain.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k flutter_ci_keychain flutter_ci_keychain.keychain

      # Decode and install iOS Provisioning Profile
      - name: Install Provisioning Profile
        if: github.ref == 'refs/heads/main'
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }} # e.g., from App Store Connect
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/"$PROVISIONING_PROFILE_UUID".mobileprovision

      # Build iOS IPA for release
      - name: Build iOS IPA
        run: flutter build ipa --release
        if: github.ref == 'refs/heads/main' # Only for main branch builds
        
          # Your App Store Connect specific variables if needed, e.g.:
          # FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          # FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          # MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} # If using Fastlane Match

      # Upload the generated iOS artifact
      - name: Upload iOS IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: build/ios/ipa/*.ipa # Path to the generated IPA file
          retention-days: 7 # How long to keep the artifact

  # Job to create and upload to GitHub Release
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_android, build_ios] # This job depends on both Android and iOS builds succeeding
    if: github.ref == 'refs/heads/main' # Only run this job when pushing to the main branch

    # Permissions required to create a GitHub Release
    permissions:
      contents: write

    steps:
      # Download Android artifacts
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-app
          path: artifacts/android

      # Download iOS artifacts
      - name: Download iOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: artifacts/ios

      # Create GitHub Release and upload assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }} # Uses the GitHub run number as the tag for simplicity
          name: Release v${{ github.run_number }} # Release name
          body: |
            Automated release build from GitHub Actions.
            - Android App Bundle: `app-release.aab`
            - Android Debug APK: `app-debug.apk`
            - iOS IPA: `*.ipa`
          draft: false # Set to true if you want to draft releases first
          prerelease: false # Set to true if this is a pre-release
          files: |
            artifacts/android/build/app/outputs/bundle/release/app-release.aab
            artifacts/android/build/app/outputs/flutter-apk/app-debug.apk
            artifacts/ios/build/ios/ipa/*.ipa # Corrected path to match uploaded artifact structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
